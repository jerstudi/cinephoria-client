// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
  output   = "../../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id              String        @id @default(nanoid(11))
  name            String?
  email           String        @unique
  emailVerified   DateTime?
  image           String?
  birthday        String?
  movieId         String?
  favoriteMovies  Movie?        @relation(fields: [movieId], references: [id])
  reservation     Reservation[]
  // Resend email
  resendContactId String?
  // For the Credentials provider
  passwordHash    String?

  sessions      Session[]
  accounts      Account[]
  feedbacks     Feedback[]
  organizations OrganizationMembership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserPlan {
  FREE
  PREMIUM
}

// Organization
model Organization {
  id               String                   @id @default(nanoid(11))
  slug             String                   @unique @default(nanoid(6))
  name             String
  image            String?
  planId           String                   @default("FREE")
  email            String
  stripeCustomerId String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  members          OrganizationMembership[]
  plan             OrganizationPlan         @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([slug])
}

model OrganizationMembership {
  id             String                       @id @default(nanoid(11))
  roles          OrganizationMembershipRole[] @default([MEMBER])
  userId         String
  organizationId String
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime                     @updatedAt
  organization   Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User                         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Membership")
}

model OrganizationPlan {
  id             String         @id @default(nanoid(11))
  name           String
  maximumMembers Int            @default(1)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organization   Organization[]
}

enum OrganizationMembershipRole {
  OWNER
  ADMIN
  MEMBER
}

// Next-auth
model Account {
  id                    String  @id @default(nanoid(11))
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  data       Json?
  id         Int      @id @default(autoincrement())

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Cinephoria
model Movie {
  id            String        @id @default(nanoid())
  idx           Int           @unique @default(autoincrement())
  identifier    String        @unique
  title         String
  poster        String
  description   String
  actors        String
  directors     String
  musicComposer String
  synopsis      String
  movieDate     Int
  gender        String
  ageLimit      Int
  favorite      Boolean
  duration      Int
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  User          User[]
  cineSessions  CineSession[]
}

model Cinema {
  id           String        @id @default(nanoid())
  idx          Int           @unique @default(autoincrement())
  identifier   String        @unique
  name         String
  city         String
  cineSessions CineSession[]
  reservation  Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Hall {
  id              String        @id @default(nanoid())
  idx             Int           @unique @default(autoincrement())
  identifier      String        @unique
  hallNumber      Int
  type            String
  capacity        Int
  disabled_places Int
  cineSession     CineSession[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model City {
  id         String   @id @default(nanoid())
  idx        Int      @unique @default(autoincrement())
  identifier String   @unique
  name       String
  cp         Int
  country    String
  region     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CineSession {
  id           String        @id @default(nanoid())
  idx          Int           @unique @default(autoincrement())
  identifier   String        @unique
  movieId      String
  movie        Movie         @relation(fields: [movieId], references: [id])
  sessionStart DateTime
  sessionEnd   DateTime
  date         DateTime
  cineId       String
  cinema       Cinema        @relation(fields: [cineId], references: [id])
  hallId       String
  hall         Hall          @relation(fields: [hallId], references: [id])
  note         Int
  pricing      Int
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Reservation {
  id             String        @id @default(nanoid())
  idx            Int           @unique @default(autoincrement())
  identifier     String        @unique
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  qr_code        String
  status         String
  movieId        String
  cineId         String
  cinema         Cinema        @relation(fields: [cineId], references: [id])
  cineSessions   CineSession[]
  quantity       Int
  disabled_paces Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
